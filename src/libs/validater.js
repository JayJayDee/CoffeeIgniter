// Generated by CoffeeScript 1.10.0
var BaseValidater, Validater, credential, crypto, log, util,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

crypto = require('crypto');

credential = require('../config/credential');

log = require('../core/logger');

util = require('./util');

BaseValidater = require('../core/baseValidater');

Validater = (function(superClass) {
  extend(Validater, superClass);

  function Validater() {
    this.validateIsRoomType = bind(this.validateIsRoomType, this);
    this.validateIsDeviceType = bind(this.validateIsDeviceType, this);
    this.validateIsMemberToken = bind(this.validateIsMemberToken, this);
    this.registerValidationRule('member_token', 'validateIsMemberToken');
    this.registerValidationRule('device_type', 'validateIsDeviceType');
    this.registerValidationRule('room_type', 'validateIsRoomType');
  }

  Validater.prototype.validateIsMemberToken = function(value) {
    var memberObj, ret;
    ret = JSON.parse(JSON.stringify(this.resultBase));
    log.i('validtate - isMemberToken');
    memberObj = util.decryptMemberToken(value);
    if (memberObj !== null) {
      ret.result = true;
      ret.converted = memberObj;
    } else {
      ret.failCause = 'invalid member token';
    }
    return ret;
  };

  Validater.prototype.validateIsDeviceType = function(value) {
    var ret;
    ret = JSON.parse(JSON.stringify(this.resultBase));
    log.i('validate - isDeviceType');
    if (value === 'IOS' || value === 'ANDROID') {
      ret.result = true;
    } else {
      ret.failCause = 'invalid device type expression';
    }
    return ret;
  };

  Validater.prototype.validateIsRoomType = function(value) {
    var ret;
    ret = JSON.parse(JSON.stringify(this.resultBase));
    return ret;
  };

  return Validater;

})(BaseValidater);

module.exports = Validater;
